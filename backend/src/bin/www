#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("dotenv").config();
var app = require("../app");
var debug = require("debug")("backend:server");
const { createServer } = require("http");
const { Server } = require("socket.io");

const { getCards } = require("../utils/article");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP and WebSocket server.
 */

var httpServer = createServer(app);
const io = new Server(httpServer);
/**
 * Listen on provided port, on all network interfaces.
 */
httpServer.listen(port);
httpServer.on("error", onError);
httpServer.on("listening", onListening);
io.on("connection", async (socket) => {
  // TODO: Remove any debug when feature is mature.
  debug(`User has joined: ${socket.id}`);

  const cards = await getCards(15);

  for (let i = 0; i < cards.length; i++) {
    const card = cards[i];
    debug(
      `Card ${i + 1}: ${card.title}\n${card.desc}\nQuestion - ${
        card.timeType
      }\n`
    );
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
